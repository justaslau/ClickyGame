{"version":3,"sources":["context.js","components/Header/Navbar/Navbar.js","components/Header/Jumbotron/Jumbotron.js","components/Body/Character/Character.js","components/Body/FullCharList/FullCharList.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","characters","map","char","id","payload","Object","objectSpread","shuffle","score","incrementScore","animation","topScore","charsFromFile","clicked","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","dispatch","setState","inherits","createClass","key","value","react_default","a","createElement","props","children","Component","Consumer","Header","className","Jumbotron","Character","onImageClick","character","_this2","alt","name","src","onClick","bind","FullCharList","Body_Character_Character","App","context_Provider","Navbar","Header_Jumbotron_Jumbotron","Body_FullCharList_FullCharList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c34bd69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport charsFromFile from './characters.json';\nimport shuffle from 'shuffle-array';\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INCREASE_SCORE':\n      state.characters.map(char =>\n        char.id === action.payload.id ? action.payload : char\n      );\n      return {\n        ...state,\n        characters: shuffle(state.characters),\n        score: ++state.score,\n        incrementScore: ++state.incrementScore,\n        animation: false,\n        topScore:\n          state.topScore < state.incrementScore\n            ? state.incrementScore\n            : state.topScore\n      };\n    case 'RESET_SCORE':\n      charsFromFile.map(char => (char.clicked = false));\n\n      return {\n        ...state,\n        score: 0,\n        characters: shuffle(charsFromFile),\n        incrementScore: 0,\n        animation: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    characters: shuffle(charsFromFile),\n    score: 0,\n    topScore: 0,\n    incrementScore: 0,\n    animation: false,\n    dispatch: action => this.setState(state => reducer(state, action))\n  };\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from 'react';\nimport './header.css';\nimport { Consumer } from '../../../context';\n\nclass Header extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { score, topScore, animation } = value;\n          return (\n            <div>\n              <nav className=\"navbar\">\n                <div className=\"col-4\">Clicky Game</div>\n                <div\n                  className={animation ? 'blinkRed col-4' : 'blinkGreen col-4'}\n                >\n                  Click an image to begin!\n                </div>\n                <div className=\"col-4\">{`Score: ${score} | Top Score: ${topScore}`}</div>\n              </nav>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './jumbotron.css';\n\nclass Jumbotron extends Component {\n  render() {\n    return (\n      <section className=\"jumbotron text-center\">\n        <div className=\"container\">\n          <h1 className=\"jumbotron-heading\">Clicky Game!</h1>\n          <h2 className=\"jumbotron-heading\">\n            Click on an image to earn points, but don't click on any more than\n            once!\n          </h2>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Jumbotron;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../../context';\nimport './character.css';\n\nclass Character extends Component {\n  onImageClick = (character, dispatch) => {\n    if (!character.clicked) {\n      character.clicked = true;\n      dispatch({ type: 'INCREASE_SCORE', payload: character });\n    } else {\n      dispatch({ type: 'RESET_SCORE', payload: character });\n    }\n  };\n\n  render() {\n    const { character } = this.props;\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"col-3\">\n              <img\n                className=\"char\"\n                alt={`The Simpsons ${character.name}`}\n                src={`images/${character.name}.jpg`}\n                onClick={this.onImageClick.bind(this, character, dispatch)}\n              />\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nCharacter.propTypes = {\n  character: PropTypes.object.isRequired\n};\n\nexport default Character;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../../context';\nimport Character from '../Character/Character';\nimport './fullcharlist.css';\n\nclass FullCharList extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { animation, characters } = value;\n          return (\n            <div className=\"container\">\n              <div className={animation ? 'shakeDiv row' : 'row'}>\n                {characters.map(char => (\n                  <Character key={char.id} character={char} />\n                ))}\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default FullCharList;\n","import React, { Component } from 'react';\nimport Navbar from './components/Header/Navbar/Navbar';\nimport Jumbotron from './components/Header/Jumbotron/Jumbotron';\nimport FullCharList from './components/Body/FullCharList/FullCharList';\nimport { Provider } from './context';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <Navbar />\n          <Jumbotron />\n          <FullCharList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}